# -*- coding: utf-8 -*-
"""Music_Genre_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WO_FgkdUlyQpFDZ9FgPPhIbZvLwUi-FX
"""

import math
import json
import librosa
import os
import numpy as np
from sklearn.model_selection import train_test_split

!pip install kaggle

from google.colab import files
files.upload()

# Commented out IPython magic to ensure Python compatibility.
# %mkdir ~/.kaggle/

!cp ./kaggle.json ~/.kaggle/

!pip install --upgrade kaggle
# Import libraries
from kaggle.api.kaggle_api import KaggleApi

!pip install --upgrade kaggle

from kaggle.api import KaggleApi

api = KaggleApi()

#api.authenticate()

api.dataset_download_files('andradaolteanu/gtzan-dataset-music-genre-classification', path='./data', unzip=True)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy
import sys
import os
import pickle
import librosa
import librosa.display
from IPython.display import Audio
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf
from tensorflow import keras

df=pd.read_csv("/content/data/Data/features_3_sec.csv")
df.head()

df.shape

df.dtypes

df=df.drop(labels='filename',axis=1)

audio_recording="/content/data/Data/genres_original/country/country.00050.wav"
data, sr=librosa.load(audio_recording)
print(type(data), type(sr))

data, sr=librosa.load(audio_recording)

librosa.load(audio_recording, sr=45600)

import IPython
IPython.display.Audio(data, rate=sr)

!pip install librosa

import librosa.display

plt.figure(figsize=(12, 4))
librosa.display.waveshow(data, sr=sr, color="#2B4F72")
plt.show()

stft=librosa.stft(data)
stft_db=librosa.amplitude_to_db(abs(stft))
plt.figure(figsize=(14, 6))
librosa.display.specshow(stft, sr=sr, x_axis='time', y_axis='hz')
plt.colorbar()

stft=librosa.stft(data)
stft_db=librosa.amplitude_to_db(abs(stft))
plt.figure(figsize=(14, 6))
librosa.display.specshow(stft_db, sr=sr, x_axis='time', y_axis='hz')
plt.colorbar()

!pip install --upgrade librosa

import matplotlib.pyplot as plt
start=1000
end = 1200
plt.figure(figsize=(14, 5))
plt.plot(data[start:end], color="#2B4F72")
plt.grid()

zero_cross_rate = librosa.zero_crossings(data[start:end], pad=False)
print("The number of zero-crossings is", sum(zero_cross_rate))

class_list = df.iloc[:, -1]
convertor=LabelEncoder()

y=convertor.fit_transform(class_list)

class_list=convertor.inverse_transform(y)
print(class_list)

print(y)

print(df.iloc[:, :-1])

from sklearn.preprocessing import StandardScaler
fit=StandardScaler()
X = fit.fit_transform(np.array(df.iloc[:, :-1], dtype = float))

X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.33)

len(y_train)

len(y_test)

from keras.models import Sequential
#from keras.wrappers.scikit_learn import KerasClassifier

def trainModel(model, epochs, optimizer):
  batch_size = 128
  #callback myCallback()
  model.compile(optimizer=optimizer,
                    loss='sparse_categorical_crossentropy',
                    metrics='accuracy')
  return model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=epochs, batch_size=batch_size)

def plotValidate(history):
  print("Validation Accuracy", max(history.history["val_accuracy"]))
  pd.DataFrame(history.history).plot(figsize=(12,6))
  plt.show()

model=keras.models.Sequential([keras.layers.Dense(512, activation='relu', input_shape=(X_train.shape[1],)),
                               keras.layers.Dropout(0.2),keras.layers.Dense (256, activation='relu'), keras.layers.Dropout(0.2), keras.layers.Dense(128, activation='relu'), keras.layers.Dropout(0.2), keras.layers.Dense (64, activation='relu'), keras.layers.Dropout(0.2), keras.layers.Dense(10, activation='softmax'),
                               ])
print(model.summary())
model_history=trainModel(model=model, epochs=600, optimizer='adam')

plotValidate(model_history)

y_pred = model.predict(X_test)
t=np.argmax(y_pred[-1])
if t== 0:
    genre_detected = 'blues'
elif t== 1:
    genre_detected = 'classical'
elif t== 2:
    genre_detected = 'country'
elif t== 3:
    genre_detected = 'disco'
elif t== 4:
    genre_detected = 'hiphop'
elif t== 5:
    genre_detected = 'jazz'
elif t==6:
    genre_detected = 'metal'
elif t==7:
    genre_detected = 'pop'
elif t==8:
   genre_detected = 'reggae'
else:
    genre_detected = 'rock'
print("Genre:", genre_detected)

test_loss, test_acc = model.evaluate(X_test, y_test, batch_size=128)
print("The test Loss is:", test_loss)
print("\nThe Best test Accuracy is", test_acc*100)

